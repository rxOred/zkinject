#include "zkmemorymap.hh"

#include <cstdint>
#include <cstdio>
#include <fstream>
#include <optional>
#include <regex>
#include <tuple>

#include "zkexcept.hh"
#include "zktypes.hh"
#include "zkutils.hh"

zkprocess::page_t::page_t(addr_t saddr, addr_t eaddr,
                          std::string permissions,
                          std::optional<std::string> name)
    : page_saddr(saddr),
      page_eaddr(eaddr),
      page_permissions(permissions),
      page_name(name) {}

std::optional<std::string> zkprocess::page_t::get_page_name(void) const {
    return page_name.value_or("");
}

void zkprocess::MemoryMap::get_memory_map(void) {

    // FIXME make this more c++ like
    char buffer[24];
    if (mm_pid != 0) {
        std::sprintf(buffer, MAPPATH, mm_pid);
    } else {
        std::sprintf(buffer, "/proc/self/maps");
    }

    std::ifstream fh(buffer);
    std::string line, start_addr, end_addr, permissions, name;
    addr_t s_addr = 0x0, e_addr = 0x0;
    std::smatch match;
    std::regex regex(R"(([a-f0-9]+)-([a-f0-9]+) ([rxwp-]{4}) (.*))",
                     std::regex::optimize);
    // FIXME parses all the shit after permissions to same string

    // A small optimization - reserving vector space for segments
    // 4 for the PT_LOAD segments of the binary
    // 5 for the PT_LOAD segments of the dynamic linker
    // rest for the stack, heap, vdso and vvar
    mm_pageinfo.reserve(13);
    while (std::getline(fh, line)) {
        std::regex_match(line, match, regex);
        start_addr = match.str(0);
        end_addr = match.str(1);
        permissions = match.str(2);
        if (match.size() == 5) {
            name = match.str(4);
        }

        std::sscanf(start_addr.c_str(), "%lx", &s_addr);
        std::sscanf(end_addr.c_str(), "%lx", &e_addr);

        mm_pageinfo.emplace_back(s_addr, e_addr, permissions, name);
    }	
}

zkprocess::MemoryMap::MemoryMap(pid_t pid)
	:mm_pid(pid)
{}
    // FIXME make this a seperate method because this wont parse the
    // whole memory map since program is not loaded yet, its ust the
    // binary and the dynamic linker

std::optional<
    std::tuple<addr_t, addr_t, std::string, std::optional<std::string>>>
zkprocess::MemoryMap::GetModulePage(const char* module_name) const {
    for (auto const& x : mm_pageinfo) {
        if (x.GetPageName().value_or("").compare(module_name)) {
            return std::make_tuple(
                x.GetPageStartAddress(), x.GetPageEndAddress(),
                x.GetPagePermissions(), x.GetPageName());
        }
    }
    return {};
}

std::optional<addr_t> zkprocess::MemoryMap::get_module_start_address(
    const char* module_name) const {
    for (auto const& x : mm_pageinfo) {
        if (x.get_page_name().value_or("").compare(module_name)) {
            return x.GetPageStartAddress();
        }
    }
    return {};
}

std::optional<addr_t> zkprocess::MemoryMap::get_module_end_address(
    const char* module_name) const {
    for (auto const& x : mm_pageinfo) {
        if (x.get_page_name().value_or("").compare(module_name)) {
            return x.GetPageEndAddress();
        }
    }
    return {};
}

bool zkprocess::MemoryMap::is_mapped(addr_t addr) const {
    /* check if given address is kernel allocated */
    if (addr >= 0x7fffffffffffff) {
        return true;
    }
    for (int i = 0; i < mm_pageinfo.size(); i++) {
        if ((addr & 0x000000000000ffff) ==
                mm_pageinfo[i].GetPageStartAddress() ||
            (addr & 0x000000000000ffff) ==
                mm_pageinfo[i].GetPageEndAddress()) {
            return true;
        }
    }
    return false;
}
